
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Category
 * 
 */
export type Category = {
  id: number
  name: string
  created_at: Date
}

/**
 * Model Product
 * 
 */
export type Product = {
  id: number
  korean_name: string
  english_name: string | null
  category_id: number
  created_at: Date
}

/**
 * Model Product_image
 * 
 */
export type Product_image = {
  id: number
  image_url: string
  product_id: number
  created_at: Date
}

/**
 * Model Allergy
 * 
 */
export type Allergy = {
  id: number
  name: string
  created_at: Date
}

/**
 * Model Products_allergy
 * 
 */
export type Products_allergy = {
  id: number
  product_id: number
  allergy_id: number
  created_at: Date
}

/**
 * Model Nutrition
 * 
 */
export type Nutrition = {
  id: number
  product_id: number
  caffein: number | null
  fat: number | null
  sugar: number | null
  sodium: number | null
  created_at: Date
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  password: string
  username: string | null
  address: string | null
  phone_number: string | null
  policy_agreed: boolean
  created_at: Date
  updated_at: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Categories
 * const categories = await prisma.category.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Categories
   * const categories = await prisma.category.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.product_image`: Exposes CRUD operations for the **Product_image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Product_images
    * const product_images = await prisma.product_image.findMany()
    * ```
    */
  get product_image(): Prisma.Product_imageDelegate<GlobalReject>;

  /**
   * `prisma.allergy`: Exposes CRUD operations for the **Allergy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allergies
    * const allergies = await prisma.allergy.findMany()
    * ```
    */
  get allergy(): Prisma.AllergyDelegate<GlobalReject>;

  /**
   * `prisma.products_allergy`: Exposes CRUD operations for the **Products_allergy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products_allergies
    * const products_allergies = await prisma.products_allergy.findMany()
    * ```
    */
  get products_allergy(): Prisma.Products_allergyDelegate<GlobalReject>;

  /**
   * `prisma.nutrition`: Exposes CRUD operations for the **Nutrition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nutritions
    * const nutritions = await prisma.nutrition.findMany()
    * ```
    */
  get nutrition(): Prisma.NutritionDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Category: 'Category',
    Product: 'Product',
    Product_image: 'Product_image',
    Allergy: 'Allergy',
    Products_allergy: 'Products_allergy',
    Nutrition: 'Nutrition',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    Product: number
  }

  export type CategoryCountOutputTypeSelect = {
    Product?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends CategoryCountOutputTypeArgs
    ?'include' extends U
    ? CategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
    : CategoryCountOutputType
  : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    Product_image: number
    Products_allergy: number
  }

  export type ProductCountOutputTypeSelect = {
    Product_image?: boolean
    Products_allergy?: boolean
  }

  export type ProductCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProductCountOutputType
    : S extends undefined
    ? never
    : S extends ProductCountOutputTypeArgs
    ?'include' extends U
    ? ProductCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProductCountOutputType ? ProductCountOutputType[P] : never
  } 
    : ProductCountOutputType
  : ProductCountOutputType




  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     * 
    **/
    select?: ProductCountOutputTypeSelect | null
  }



  /**
   * Count Type AllergyCountOutputType
   */


  export type AllergyCountOutputType = {
    Products_allergy: number
  }

  export type AllergyCountOutputTypeSelect = {
    Products_allergy?: boolean
  }

  export type AllergyCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AllergyCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AllergyCountOutputType
    : S extends undefined
    ? never
    : S extends AllergyCountOutputTypeArgs
    ?'include' extends U
    ? AllergyCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AllergyCountOutputType ? AllergyCountOutputType[P] : never
  } 
    : AllergyCountOutputType
  : AllergyCountOutputType




  // Custom InputTypes

  /**
   * AllergyCountOutputType without action
   */
  export type AllergyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AllergyCountOutputType
     * 
    **/
    select?: AllergyCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    Product?: boolean | ProductFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryInclude = {
    Product?: boolean | ProductFindManyArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Product' ? Array < ProductGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Product' ? Array < ProductGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Product<T extends ProductFindManyArgs = {}>(args?: Subset<T, ProductFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    category_id: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    category_id: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    korean_name: string | null
    english_name: string | null
    category_id: number | null
    created_at: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    korean_name: string | null
    english_name: string | null
    category_id: number | null
    created_at: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    korean_name: number
    english_name: number
    category_id: number
    created_at: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    category_id?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    category_id?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    korean_name?: true
    english_name?: true
    category_id?: true
    created_at?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    korean_name?: true
    english_name?: true
    category_id?: true
    created_at?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    korean_name?: true
    english_name?: true
    category_id?: true
    created_at?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>
    by: Array<ProductScalarFieldEnum>
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: number
    korean_name: string
    english_name: string | null
    category_id: number
    created_at: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect = {
    id?: boolean
    korean_name?: boolean
    english_name?: boolean
    category_id?: boolean
    created_at?: boolean
    categories?: boolean | CategoryArgs
    Product_image?: boolean | Product_imageFindManyArgs
    Products_allergy?: boolean | Products_allergyFindManyArgs
    Nutrition?: boolean | NutritionArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type ProductInclude = {
    categories?: boolean | CategoryArgs
    Product_image?: boolean | Product_imageFindManyArgs
    Products_allergy?: boolean | Products_allergyFindManyArgs
    Nutrition?: boolean | NutritionArgs
    _count?: boolean | ProductCountOutputTypeArgs
  }

  export type ProductGetPayload<
    S extends boolean | null | undefined | ProductArgs,
    U = keyof S
      > = S extends true
        ? Product
    : S extends undefined
    ? never
    : S extends ProductArgs | ProductFindManyArgs
    ?'include' extends U
    ? Product  & {
    [P in TrueKeys<S['include']>]:
        P extends 'categories' ? CategoryGetPayload<S['include'][P]> :
        P extends 'Product_image' ? Array < Product_imageGetPayload<S['include'][P]>>  :
        P extends 'Products_allergy' ? Array < Products_allergyGetPayload<S['include'][P]>>  :
        P extends 'Nutrition' ? NutritionGetPayload<S['include'][P]> | null :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'categories' ? CategoryGetPayload<S['select'][P]> :
        P extends 'Product_image' ? Array < Product_imageGetPayload<S['select'][P]>>  :
        P extends 'Products_allergy' ? Array < Products_allergyGetPayload<S['select'][P]>>  :
        P extends 'Nutrition' ? NutritionGetPayload<S['select'][P]> | null :
        P extends '_count' ? ProductCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Product ? Product[P] : never
  } 
    : Product
  : Product


  type ProductCountArgs = Merge<
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface ProductDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categories<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    Product_image<T extends Product_imageFindManyArgs = {}>(args?: Subset<T, Product_imageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Product_image>>, PrismaPromise<Array<Product_imageGetPayload<T>>>>;

    Products_allergy<T extends Products_allergyFindManyArgs = {}>(args?: Subset<T, Products_allergyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Products_allergy>>, PrismaPromise<Array<Products_allergyGetPayload<T>>>>;

    Nutrition<T extends NutritionArgs = {}>(args?: Subset<T, NutritionArgs>): CheckSelect<T, Prisma__NutritionClient<Nutrition | null >, Prisma__NutritionClient<NutritionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Throw an Error if a Product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Throw an Error if a Product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The data needed to create a Product.
     * 
    **/
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    /**
     * The data used to create many Products.
     * 
    **/
    data: Enumerable<ProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The data needed to update a Product.
     * 
    **/
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    /**
     * The data used to update Products.
     * 
    **/
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * The filter to search for the Product to update in case it exists.
     * 
    **/
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     * 
    **/
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
    /**
     * Filter which Product to delete.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    /**
     * Filter which Products to delete
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductInclude | null
  }



  /**
   * Model Product_image
   */


  export type AggregateProduct_image = {
    _count: Product_imageCountAggregateOutputType | null
    _avg: Product_imageAvgAggregateOutputType | null
    _sum: Product_imageSumAggregateOutputType | null
    _min: Product_imageMinAggregateOutputType | null
    _max: Product_imageMaxAggregateOutputType | null
  }

  export type Product_imageAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type Product_imageSumAggregateOutputType = {
    id: number | null
    product_id: number | null
  }

  export type Product_imageMinAggregateOutputType = {
    id: number | null
    image_url: string | null
    product_id: number | null
    created_at: Date | null
  }

  export type Product_imageMaxAggregateOutputType = {
    id: number | null
    image_url: string | null
    product_id: number | null
    created_at: Date | null
  }

  export type Product_imageCountAggregateOutputType = {
    id: number
    image_url: number
    product_id: number
    created_at: number
    _all: number
  }


  export type Product_imageAvgAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type Product_imageSumAggregateInputType = {
    id?: true
    product_id?: true
  }

  export type Product_imageMinAggregateInputType = {
    id?: true
    image_url?: true
    product_id?: true
    created_at?: true
  }

  export type Product_imageMaxAggregateInputType = {
    id?: true
    image_url?: true
    product_id?: true
    created_at?: true
  }

  export type Product_imageCountAggregateInputType = {
    id?: true
    image_url?: true
    product_id?: true
    created_at?: true
    _all?: true
  }

  export type Product_imageAggregateArgs = {
    /**
     * Filter which Product_image to aggregate.
     * 
    **/
    where?: Product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_images to fetch.
     * 
    **/
    orderBy?: Enumerable<Product_imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Product_images
    **/
    _count?: true | Product_imageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Product_imageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Product_imageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Product_imageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Product_imageMaxAggregateInputType
  }

  export type GetProduct_imageAggregateType<T extends Product_imageAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct_image]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct_image[P]>
      : GetScalarType<T[P], AggregateProduct_image[P]>
  }




  export type Product_imageGroupByArgs = {
    where?: Product_imageWhereInput
    orderBy?: Enumerable<Product_imageOrderByWithAggregationInput>
    by: Array<Product_imageScalarFieldEnum>
    having?: Product_imageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Product_imageCountAggregateInputType | true
    _avg?: Product_imageAvgAggregateInputType
    _sum?: Product_imageSumAggregateInputType
    _min?: Product_imageMinAggregateInputType
    _max?: Product_imageMaxAggregateInputType
  }


  export type Product_imageGroupByOutputType = {
    id: number
    image_url: string
    product_id: number
    created_at: Date
    _count: Product_imageCountAggregateOutputType | null
    _avg: Product_imageAvgAggregateOutputType | null
    _sum: Product_imageSumAggregateOutputType | null
    _min: Product_imageMinAggregateOutputType | null
    _max: Product_imageMaxAggregateOutputType | null
  }

  type GetProduct_imageGroupByPayload<T extends Product_imageGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Product_imageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Product_imageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Product_imageGroupByOutputType[P]>
            : GetScalarType<T[P], Product_imageGroupByOutputType[P]>
        }
      >
    >


  export type Product_imageSelect = {
    id?: boolean
    image_url?: boolean
    product_id?: boolean
    created_at?: boolean
    products?: boolean | ProductArgs
  }

  export type Product_imageInclude = {
    products?: boolean | ProductArgs
  }

  export type Product_imageGetPayload<
    S extends boolean | null | undefined | Product_imageArgs,
    U = keyof S
      > = S extends true
        ? Product_image
    : S extends undefined
    ? never
    : S extends Product_imageArgs | Product_imageFindManyArgs
    ?'include' extends U
    ? Product_image  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? ProductGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? ProductGetPayload<S['select'][P]> :  P extends keyof Product_image ? Product_image[P] : never
  } 
    : Product_image
  : Product_image


  type Product_imageCountArgs = Merge<
    Omit<Product_imageFindManyArgs, 'select' | 'include'> & {
      select?: Product_imageCountAggregateInputType | true
    }
  >

  export interface Product_imageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product_image that matches the filter.
     * @param {Product_imageFindUniqueArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Product_imageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Product_imageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product_image'> extends True ? CheckSelect<T, Prisma__Product_imageClient<Product_image>, Prisma__Product_imageClient<Product_imageGetPayload<T>>> : CheckSelect<T, Prisma__Product_imageClient<Product_image | null >, Prisma__Product_imageClient<Product_imageGetPayload<T> | null >>

    /**
     * Find the first Product_image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageFindFirstArgs} args - Arguments to find a Product_image
     * @example
     * // Get one Product_image
     * const product_image = await prisma.product_image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Product_imageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Product_imageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product_image'> extends True ? CheckSelect<T, Prisma__Product_imageClient<Product_image>, Prisma__Product_imageClient<Product_imageGetPayload<T>>> : CheckSelect<T, Prisma__Product_imageClient<Product_image | null >, Prisma__Product_imageClient<Product_imageGetPayload<T> | null >>

    /**
     * Find zero or more Product_images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Product_images
     * const product_images = await prisma.product_image.findMany()
     * 
     * // Get first 10 Product_images
     * const product_images = await prisma.product_image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const product_imageWithIdOnly = await prisma.product_image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Product_imageFindManyArgs>(
      args?: SelectSubset<T, Product_imageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Product_image>>, PrismaPromise<Array<Product_imageGetPayload<T>>>>

    /**
     * Create a Product_image.
     * @param {Product_imageCreateArgs} args - Arguments to create a Product_image.
     * @example
     * // Create one Product_image
     * const Product_image = await prisma.product_image.create({
     *   data: {
     *     // ... data to create a Product_image
     *   }
     * })
     * 
    **/
    create<T extends Product_imageCreateArgs>(
      args: SelectSubset<T, Product_imageCreateArgs>
    ): CheckSelect<T, Prisma__Product_imageClient<Product_image>, Prisma__Product_imageClient<Product_imageGetPayload<T>>>

    /**
     * Create many Product_images.
     *     @param {Product_imageCreateManyArgs} args - Arguments to create many Product_images.
     *     @example
     *     // Create many Product_images
     *     const product_image = await prisma.product_image.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Product_imageCreateManyArgs>(
      args?: SelectSubset<T, Product_imageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product_image.
     * @param {Product_imageDeleteArgs} args - Arguments to delete one Product_image.
     * @example
     * // Delete one Product_image
     * const Product_image = await prisma.product_image.delete({
     *   where: {
     *     // ... filter to delete one Product_image
     *   }
     * })
     * 
    **/
    delete<T extends Product_imageDeleteArgs>(
      args: SelectSubset<T, Product_imageDeleteArgs>
    ): CheckSelect<T, Prisma__Product_imageClient<Product_image>, Prisma__Product_imageClient<Product_imageGetPayload<T>>>

    /**
     * Update one Product_image.
     * @param {Product_imageUpdateArgs} args - Arguments to update one Product_image.
     * @example
     * // Update one Product_image
     * const product_image = await prisma.product_image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Product_imageUpdateArgs>(
      args: SelectSubset<T, Product_imageUpdateArgs>
    ): CheckSelect<T, Prisma__Product_imageClient<Product_image>, Prisma__Product_imageClient<Product_imageGetPayload<T>>>

    /**
     * Delete zero or more Product_images.
     * @param {Product_imageDeleteManyArgs} args - Arguments to filter Product_images to delete.
     * @example
     * // Delete a few Product_images
     * const { count } = await prisma.product_image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Product_imageDeleteManyArgs>(
      args?: SelectSubset<T, Product_imageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Product_images
     * const product_image = await prisma.product_image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Product_imageUpdateManyArgs>(
      args: SelectSubset<T, Product_imageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product_image.
     * @param {Product_imageUpsertArgs} args - Arguments to update or create a Product_image.
     * @example
     * // Update or create a Product_image
     * const product_image = await prisma.product_image.upsert({
     *   create: {
     *     // ... data to create a Product_image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product_image we want to update
     *   }
     * })
    **/
    upsert<T extends Product_imageUpsertArgs>(
      args: SelectSubset<T, Product_imageUpsertArgs>
    ): CheckSelect<T, Prisma__Product_imageClient<Product_image>, Prisma__Product_imageClient<Product_imageGetPayload<T>>>

    /**
     * Count the number of Product_images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageCountArgs} args - Arguments to filter Product_images to count.
     * @example
     * // Count the number of Product_images
     * const count = await prisma.product_image.count({
     *   where: {
     *     // ... the filter for the Product_images we want to count
     *   }
     * })
    **/
    count<T extends Product_imageCountArgs>(
      args?: Subset<T, Product_imageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Product_imageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product_image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Product_imageAggregateArgs>(args: Subset<T, Product_imageAggregateArgs>): PrismaPromise<GetProduct_imageAggregateType<T>>

    /**
     * Group by Product_image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Product_imageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Product_imageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Product_imageGroupByArgs['orderBy'] }
        : { orderBy?: Product_imageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Product_imageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduct_imageGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product_image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Product_imageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Product_image findUnique
   */
  export type Product_imageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Product_image
     * 
    **/
    select?: Product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Product_imageInclude | null
    /**
     * Throw an Error if a Product_image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product_image to fetch.
     * 
    **/
    where: Product_imageWhereUniqueInput
  }


  /**
   * Product_image findFirst
   */
  export type Product_imageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Product_image
     * 
    **/
    select?: Product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Product_imageInclude | null
    /**
     * Throw an Error if a Product_image can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product_image to fetch.
     * 
    **/
    where?: Product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_images to fetch.
     * 
    **/
    orderBy?: Enumerable<Product_imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Product_images.
     * 
    **/
    cursor?: Product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_images.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Product_images.
     * 
    **/
    distinct?: Enumerable<Product_imageScalarFieldEnum>
  }


  /**
   * Product_image findMany
   */
  export type Product_imageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product_image
     * 
    **/
    select?: Product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Product_imageInclude | null
    /**
     * Filter, which Product_images to fetch.
     * 
    **/
    where?: Product_imageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Product_images to fetch.
     * 
    **/
    orderBy?: Enumerable<Product_imageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Product_images.
     * 
    **/
    cursor?: Product_imageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Product_images from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Product_images.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Product_imageScalarFieldEnum>
  }


  /**
   * Product_image create
   */
  export type Product_imageCreateArgs = {
    /**
     * Select specific fields to fetch from the Product_image
     * 
    **/
    select?: Product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Product_imageInclude | null
    /**
     * The data needed to create a Product_image.
     * 
    **/
    data: XOR<Product_imageCreateInput, Product_imageUncheckedCreateInput>
  }


  /**
   * Product_image createMany
   */
  export type Product_imageCreateManyArgs = {
    /**
     * The data used to create many Product_images.
     * 
    **/
    data: Enumerable<Product_imageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product_image update
   */
  export type Product_imageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product_image
     * 
    **/
    select?: Product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Product_imageInclude | null
    /**
     * The data needed to update a Product_image.
     * 
    **/
    data: XOR<Product_imageUpdateInput, Product_imageUncheckedUpdateInput>
    /**
     * Choose, which Product_image to update.
     * 
    **/
    where: Product_imageWhereUniqueInput
  }


  /**
   * Product_image updateMany
   */
  export type Product_imageUpdateManyArgs = {
    /**
     * The data used to update Product_images.
     * 
    **/
    data: XOR<Product_imageUpdateManyMutationInput, Product_imageUncheckedUpdateManyInput>
    /**
     * Filter which Product_images to update
     * 
    **/
    where?: Product_imageWhereInput
  }


  /**
   * Product_image upsert
   */
  export type Product_imageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product_image
     * 
    **/
    select?: Product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Product_imageInclude | null
    /**
     * The filter to search for the Product_image to update in case it exists.
     * 
    **/
    where: Product_imageWhereUniqueInput
    /**
     * In case the Product_image found by the `where` argument doesn't exist, create a new Product_image with this data.
     * 
    **/
    create: XOR<Product_imageCreateInput, Product_imageUncheckedCreateInput>
    /**
     * In case the Product_image was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Product_imageUpdateInput, Product_imageUncheckedUpdateInput>
  }


  /**
   * Product_image delete
   */
  export type Product_imageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product_image
     * 
    **/
    select?: Product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Product_imageInclude | null
    /**
     * Filter which Product_image to delete.
     * 
    **/
    where: Product_imageWhereUniqueInput
  }


  /**
   * Product_image deleteMany
   */
  export type Product_imageDeleteManyArgs = {
    /**
     * Filter which Product_images to delete
     * 
    **/
    where?: Product_imageWhereInput
  }


  /**
   * Product_image without action
   */
  export type Product_imageArgs = {
    /**
     * Select specific fields to fetch from the Product_image
     * 
    **/
    select?: Product_imageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Product_imageInclude | null
  }



  /**
   * Model Allergy
   */


  export type AggregateAllergy = {
    _count: AllergyCountAggregateOutputType | null
    _avg: AllergyAvgAggregateOutputType | null
    _sum: AllergySumAggregateOutputType | null
    _min: AllergyMinAggregateOutputType | null
    _max: AllergyMaxAggregateOutputType | null
  }

  export type AllergyAvgAggregateOutputType = {
    id: number | null
  }

  export type AllergySumAggregateOutputType = {
    id: number | null
  }

  export type AllergyMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type AllergyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
  }

  export type AllergyCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    _all: number
  }


  export type AllergyAvgAggregateInputType = {
    id?: true
  }

  export type AllergySumAggregateInputType = {
    id?: true
  }

  export type AllergyMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type AllergyMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
  }

  export type AllergyCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    _all?: true
  }

  export type AllergyAggregateArgs = {
    /**
     * Filter which Allergy to aggregate.
     * 
    **/
    where?: AllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<AllergyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Allergies
    **/
    _count?: true | AllergyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllergyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllergySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllergyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllergyMaxAggregateInputType
  }

  export type GetAllergyAggregateType<T extends AllergyAggregateArgs> = {
        [P in keyof T & keyof AggregateAllergy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllergy[P]>
      : GetScalarType<T[P], AggregateAllergy[P]>
  }




  export type AllergyGroupByArgs = {
    where?: AllergyWhereInput
    orderBy?: Enumerable<AllergyOrderByWithAggregationInput>
    by: Array<AllergyScalarFieldEnum>
    having?: AllergyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllergyCountAggregateInputType | true
    _avg?: AllergyAvgAggregateInputType
    _sum?: AllergySumAggregateInputType
    _min?: AllergyMinAggregateInputType
    _max?: AllergyMaxAggregateInputType
  }


  export type AllergyGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    _count: AllergyCountAggregateOutputType | null
    _avg: AllergyAvgAggregateOutputType | null
    _sum: AllergySumAggregateOutputType | null
    _min: AllergyMinAggregateOutputType | null
    _max: AllergyMaxAggregateOutputType | null
  }

  type GetAllergyGroupByPayload<T extends AllergyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AllergyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllergyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllergyGroupByOutputType[P]>
            : GetScalarType<T[P], AllergyGroupByOutputType[P]>
        }
      >
    >


  export type AllergySelect = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    Products_allergy?: boolean | Products_allergyFindManyArgs
    _count?: boolean | AllergyCountOutputTypeArgs
  }

  export type AllergyInclude = {
    Products_allergy?: boolean | Products_allergyFindManyArgs
    _count?: boolean | AllergyCountOutputTypeArgs
  }

  export type AllergyGetPayload<
    S extends boolean | null | undefined | AllergyArgs,
    U = keyof S
      > = S extends true
        ? Allergy
    : S extends undefined
    ? never
    : S extends AllergyArgs | AllergyFindManyArgs
    ?'include' extends U
    ? Allergy  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Products_allergy' ? Array < Products_allergyGetPayload<S['include'][P]>>  :
        P extends '_count' ? AllergyCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Products_allergy' ? Array < Products_allergyGetPayload<S['select'][P]>>  :
        P extends '_count' ? AllergyCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Allergy ? Allergy[P] : never
  } 
    : Allergy
  : Allergy


  type AllergyCountArgs = Merge<
    Omit<AllergyFindManyArgs, 'select' | 'include'> & {
      select?: AllergyCountAggregateInputType | true
    }
  >

  export interface AllergyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Allergy that matches the filter.
     * @param {AllergyFindUniqueArgs} args - Arguments to find a Allergy
     * @example
     * // Get one Allergy
     * const allergy = await prisma.allergy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AllergyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AllergyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Allergy'> extends True ? CheckSelect<T, Prisma__AllergyClient<Allergy>, Prisma__AllergyClient<AllergyGetPayload<T>>> : CheckSelect<T, Prisma__AllergyClient<Allergy | null >, Prisma__AllergyClient<AllergyGetPayload<T> | null >>

    /**
     * Find the first Allergy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyFindFirstArgs} args - Arguments to find a Allergy
     * @example
     * // Get one Allergy
     * const allergy = await prisma.allergy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AllergyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AllergyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Allergy'> extends True ? CheckSelect<T, Prisma__AllergyClient<Allergy>, Prisma__AllergyClient<AllergyGetPayload<T>>> : CheckSelect<T, Prisma__AllergyClient<Allergy | null >, Prisma__AllergyClient<AllergyGetPayload<T> | null >>

    /**
     * Find zero or more Allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allergies
     * const allergies = await prisma.allergy.findMany()
     * 
     * // Get first 10 Allergies
     * const allergies = await prisma.allergy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allergyWithIdOnly = await prisma.allergy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AllergyFindManyArgs>(
      args?: SelectSubset<T, AllergyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Allergy>>, PrismaPromise<Array<AllergyGetPayload<T>>>>

    /**
     * Create a Allergy.
     * @param {AllergyCreateArgs} args - Arguments to create a Allergy.
     * @example
     * // Create one Allergy
     * const Allergy = await prisma.allergy.create({
     *   data: {
     *     // ... data to create a Allergy
     *   }
     * })
     * 
    **/
    create<T extends AllergyCreateArgs>(
      args: SelectSubset<T, AllergyCreateArgs>
    ): CheckSelect<T, Prisma__AllergyClient<Allergy>, Prisma__AllergyClient<AllergyGetPayload<T>>>

    /**
     * Create many Allergies.
     *     @param {AllergyCreateManyArgs} args - Arguments to create many Allergies.
     *     @example
     *     // Create many Allergies
     *     const allergy = await prisma.allergy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AllergyCreateManyArgs>(
      args?: SelectSubset<T, AllergyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Allergy.
     * @param {AllergyDeleteArgs} args - Arguments to delete one Allergy.
     * @example
     * // Delete one Allergy
     * const Allergy = await prisma.allergy.delete({
     *   where: {
     *     // ... filter to delete one Allergy
     *   }
     * })
     * 
    **/
    delete<T extends AllergyDeleteArgs>(
      args: SelectSubset<T, AllergyDeleteArgs>
    ): CheckSelect<T, Prisma__AllergyClient<Allergy>, Prisma__AllergyClient<AllergyGetPayload<T>>>

    /**
     * Update one Allergy.
     * @param {AllergyUpdateArgs} args - Arguments to update one Allergy.
     * @example
     * // Update one Allergy
     * const allergy = await prisma.allergy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AllergyUpdateArgs>(
      args: SelectSubset<T, AllergyUpdateArgs>
    ): CheckSelect<T, Prisma__AllergyClient<Allergy>, Prisma__AllergyClient<AllergyGetPayload<T>>>

    /**
     * Delete zero or more Allergies.
     * @param {AllergyDeleteManyArgs} args - Arguments to filter Allergies to delete.
     * @example
     * // Delete a few Allergies
     * const { count } = await prisma.allergy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AllergyDeleteManyArgs>(
      args?: SelectSubset<T, AllergyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allergies
     * const allergy = await prisma.allergy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AllergyUpdateManyArgs>(
      args: SelectSubset<T, AllergyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Allergy.
     * @param {AllergyUpsertArgs} args - Arguments to update or create a Allergy.
     * @example
     * // Update or create a Allergy
     * const allergy = await prisma.allergy.upsert({
     *   create: {
     *     // ... data to create a Allergy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allergy we want to update
     *   }
     * })
    **/
    upsert<T extends AllergyUpsertArgs>(
      args: SelectSubset<T, AllergyUpsertArgs>
    ): CheckSelect<T, Prisma__AllergyClient<Allergy>, Prisma__AllergyClient<AllergyGetPayload<T>>>

    /**
     * Count the number of Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyCountArgs} args - Arguments to filter Allergies to count.
     * @example
     * // Count the number of Allergies
     * const count = await prisma.allergy.count({
     *   where: {
     *     // ... the filter for the Allergies we want to count
     *   }
     * })
    **/
    count<T extends AllergyCountArgs>(
      args?: Subset<T, AllergyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllergyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllergyAggregateArgs>(args: Subset<T, AllergyAggregateArgs>): PrismaPromise<GetAllergyAggregateType<T>>

    /**
     * Group by Allergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllergyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllergyGroupByArgs['orderBy'] }
        : { orderBy?: AllergyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllergyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllergyGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Allergy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AllergyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Products_allergy<T extends Products_allergyFindManyArgs = {}>(args?: Subset<T, Products_allergyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Products_allergy>>, PrismaPromise<Array<Products_allergyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Allergy findUnique
   */
  export type AllergyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Allergy
     * 
    **/
    select?: AllergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergyInclude | null
    /**
     * Throw an Error if a Allergy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Allergy to fetch.
     * 
    **/
    where: AllergyWhereUniqueInput
  }


  /**
   * Allergy findFirst
   */
  export type AllergyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Allergy
     * 
    **/
    select?: AllergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergyInclude | null
    /**
     * Throw an Error if a Allergy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Allergy to fetch.
     * 
    **/
    where?: AllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<AllergyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allergies.
     * 
    **/
    cursor?: AllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allergies.
     * 
    **/
    distinct?: Enumerable<AllergyScalarFieldEnum>
  }


  /**
   * Allergy findMany
   */
  export type AllergyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Allergy
     * 
    **/
    select?: AllergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergyInclude | null
    /**
     * Filter, which Allergies to fetch.
     * 
    **/
    where?: AllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<AllergyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Allergies.
     * 
    **/
    cursor?: AllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AllergyScalarFieldEnum>
  }


  /**
   * Allergy create
   */
  export type AllergyCreateArgs = {
    /**
     * Select specific fields to fetch from the Allergy
     * 
    **/
    select?: AllergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergyInclude | null
    /**
     * The data needed to create a Allergy.
     * 
    **/
    data: XOR<AllergyCreateInput, AllergyUncheckedCreateInput>
  }


  /**
   * Allergy createMany
   */
  export type AllergyCreateManyArgs = {
    /**
     * The data used to create many Allergies.
     * 
    **/
    data: Enumerable<AllergyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Allergy update
   */
  export type AllergyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Allergy
     * 
    **/
    select?: AllergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergyInclude | null
    /**
     * The data needed to update a Allergy.
     * 
    **/
    data: XOR<AllergyUpdateInput, AllergyUncheckedUpdateInput>
    /**
     * Choose, which Allergy to update.
     * 
    **/
    where: AllergyWhereUniqueInput
  }


  /**
   * Allergy updateMany
   */
  export type AllergyUpdateManyArgs = {
    /**
     * The data used to update Allergies.
     * 
    **/
    data: XOR<AllergyUpdateManyMutationInput, AllergyUncheckedUpdateManyInput>
    /**
     * Filter which Allergies to update
     * 
    **/
    where?: AllergyWhereInput
  }


  /**
   * Allergy upsert
   */
  export type AllergyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Allergy
     * 
    **/
    select?: AllergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergyInclude | null
    /**
     * The filter to search for the Allergy to update in case it exists.
     * 
    **/
    where: AllergyWhereUniqueInput
    /**
     * In case the Allergy found by the `where` argument doesn't exist, create a new Allergy with this data.
     * 
    **/
    create: XOR<AllergyCreateInput, AllergyUncheckedCreateInput>
    /**
     * In case the Allergy was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AllergyUpdateInput, AllergyUncheckedUpdateInput>
  }


  /**
   * Allergy delete
   */
  export type AllergyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Allergy
     * 
    **/
    select?: AllergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergyInclude | null
    /**
     * Filter which Allergy to delete.
     * 
    **/
    where: AllergyWhereUniqueInput
  }


  /**
   * Allergy deleteMany
   */
  export type AllergyDeleteManyArgs = {
    /**
     * Filter which Allergies to delete
     * 
    **/
    where?: AllergyWhereInput
  }


  /**
   * Allergy without action
   */
  export type AllergyArgs = {
    /**
     * Select specific fields to fetch from the Allergy
     * 
    **/
    select?: AllergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AllergyInclude | null
  }



  /**
   * Model Products_allergy
   */


  export type AggregateProducts_allergy = {
    _count: Products_allergyCountAggregateOutputType | null
    _avg: Products_allergyAvgAggregateOutputType | null
    _sum: Products_allergySumAggregateOutputType | null
    _min: Products_allergyMinAggregateOutputType | null
    _max: Products_allergyMaxAggregateOutputType | null
  }

  export type Products_allergyAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
  }

  export type Products_allergySumAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
  }

  export type Products_allergyMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
    created_at: Date | null
  }

  export type Products_allergyMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    allergy_id: number | null
    created_at: Date | null
  }

  export type Products_allergyCountAggregateOutputType = {
    id: number
    product_id: number
    allergy_id: number
    created_at: number
    _all: number
  }


  export type Products_allergyAvgAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
  }

  export type Products_allergySumAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
  }

  export type Products_allergyMinAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
    created_at?: true
  }

  export type Products_allergyMaxAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
    created_at?: true
  }

  export type Products_allergyCountAggregateInputType = {
    id?: true
    product_id?: true
    allergy_id?: true
    created_at?: true
    _all?: true
  }

  export type Products_allergyAggregateArgs = {
    /**
     * Filter which Products_allergy to aggregate.
     * 
    **/
    where?: Products_allergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products_allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<Products_allergyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: Products_allergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products_allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products_allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products_allergies
    **/
    _count?: true | Products_allergyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Products_allergyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Products_allergySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Products_allergyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Products_allergyMaxAggregateInputType
  }

  export type GetProducts_allergyAggregateType<T extends Products_allergyAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts_allergy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts_allergy[P]>
      : GetScalarType<T[P], AggregateProducts_allergy[P]>
  }




  export type Products_allergyGroupByArgs = {
    where?: Products_allergyWhereInput
    orderBy?: Enumerable<Products_allergyOrderByWithAggregationInput>
    by: Array<Products_allergyScalarFieldEnum>
    having?: Products_allergyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Products_allergyCountAggregateInputType | true
    _avg?: Products_allergyAvgAggregateInputType
    _sum?: Products_allergySumAggregateInputType
    _min?: Products_allergyMinAggregateInputType
    _max?: Products_allergyMaxAggregateInputType
  }


  export type Products_allergyGroupByOutputType = {
    id: number
    product_id: number
    allergy_id: number
    created_at: Date
    _count: Products_allergyCountAggregateOutputType | null
    _avg: Products_allergyAvgAggregateOutputType | null
    _sum: Products_allergySumAggregateOutputType | null
    _min: Products_allergyMinAggregateOutputType | null
    _max: Products_allergyMaxAggregateOutputType | null
  }

  type GetProducts_allergyGroupByPayload<T extends Products_allergyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Products_allergyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Products_allergyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Products_allergyGroupByOutputType[P]>
            : GetScalarType<T[P], Products_allergyGroupByOutputType[P]>
        }
      >
    >


  export type Products_allergySelect = {
    id?: boolean
    product_id?: boolean
    allergy_id?: boolean
    created_at?: boolean
    products?: boolean | ProductArgs
    allergies?: boolean | AllergyArgs
  }

  export type Products_allergyInclude = {
    products?: boolean | ProductArgs
    allergies?: boolean | AllergyArgs
  }

  export type Products_allergyGetPayload<
    S extends boolean | null | undefined | Products_allergyArgs,
    U = keyof S
      > = S extends true
        ? Products_allergy
    : S extends undefined
    ? never
    : S extends Products_allergyArgs | Products_allergyFindManyArgs
    ?'include' extends U
    ? Products_allergy  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? ProductGetPayload<S['include'][P]> :
        P extends 'allergies' ? AllergyGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? ProductGetPayload<S['select'][P]> :
        P extends 'allergies' ? AllergyGetPayload<S['select'][P]> :  P extends keyof Products_allergy ? Products_allergy[P] : never
  } 
    : Products_allergy
  : Products_allergy


  type Products_allergyCountArgs = Merge<
    Omit<Products_allergyFindManyArgs, 'select' | 'include'> & {
      select?: Products_allergyCountAggregateInputType | true
    }
  >

  export interface Products_allergyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Products_allergy that matches the filter.
     * @param {Products_allergyFindUniqueArgs} args - Arguments to find a Products_allergy
     * @example
     * // Get one Products_allergy
     * const products_allergy = await prisma.products_allergy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Products_allergyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Products_allergyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Products_allergy'> extends True ? CheckSelect<T, Prisma__Products_allergyClient<Products_allergy>, Prisma__Products_allergyClient<Products_allergyGetPayload<T>>> : CheckSelect<T, Prisma__Products_allergyClient<Products_allergy | null >, Prisma__Products_allergyClient<Products_allergyGetPayload<T> | null >>

    /**
     * Find the first Products_allergy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Products_allergyFindFirstArgs} args - Arguments to find a Products_allergy
     * @example
     * // Get one Products_allergy
     * const products_allergy = await prisma.products_allergy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Products_allergyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Products_allergyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Products_allergy'> extends True ? CheckSelect<T, Prisma__Products_allergyClient<Products_allergy>, Prisma__Products_allergyClient<Products_allergyGetPayload<T>>> : CheckSelect<T, Prisma__Products_allergyClient<Products_allergy | null >, Prisma__Products_allergyClient<Products_allergyGetPayload<T> | null >>

    /**
     * Find zero or more Products_allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Products_allergyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products_allergies
     * const products_allergies = await prisma.products_allergy.findMany()
     * 
     * // Get first 10 Products_allergies
     * const products_allergies = await prisma.products_allergy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const products_allergyWithIdOnly = await prisma.products_allergy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Products_allergyFindManyArgs>(
      args?: SelectSubset<T, Products_allergyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Products_allergy>>, PrismaPromise<Array<Products_allergyGetPayload<T>>>>

    /**
     * Create a Products_allergy.
     * @param {Products_allergyCreateArgs} args - Arguments to create a Products_allergy.
     * @example
     * // Create one Products_allergy
     * const Products_allergy = await prisma.products_allergy.create({
     *   data: {
     *     // ... data to create a Products_allergy
     *   }
     * })
     * 
    **/
    create<T extends Products_allergyCreateArgs>(
      args: SelectSubset<T, Products_allergyCreateArgs>
    ): CheckSelect<T, Prisma__Products_allergyClient<Products_allergy>, Prisma__Products_allergyClient<Products_allergyGetPayload<T>>>

    /**
     * Create many Products_allergies.
     *     @param {Products_allergyCreateManyArgs} args - Arguments to create many Products_allergies.
     *     @example
     *     // Create many Products_allergies
     *     const products_allergy = await prisma.products_allergy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Products_allergyCreateManyArgs>(
      args?: SelectSubset<T, Products_allergyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Products_allergy.
     * @param {Products_allergyDeleteArgs} args - Arguments to delete one Products_allergy.
     * @example
     * // Delete one Products_allergy
     * const Products_allergy = await prisma.products_allergy.delete({
     *   where: {
     *     // ... filter to delete one Products_allergy
     *   }
     * })
     * 
    **/
    delete<T extends Products_allergyDeleteArgs>(
      args: SelectSubset<T, Products_allergyDeleteArgs>
    ): CheckSelect<T, Prisma__Products_allergyClient<Products_allergy>, Prisma__Products_allergyClient<Products_allergyGetPayload<T>>>

    /**
     * Update one Products_allergy.
     * @param {Products_allergyUpdateArgs} args - Arguments to update one Products_allergy.
     * @example
     * // Update one Products_allergy
     * const products_allergy = await prisma.products_allergy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Products_allergyUpdateArgs>(
      args: SelectSubset<T, Products_allergyUpdateArgs>
    ): CheckSelect<T, Prisma__Products_allergyClient<Products_allergy>, Prisma__Products_allergyClient<Products_allergyGetPayload<T>>>

    /**
     * Delete zero or more Products_allergies.
     * @param {Products_allergyDeleteManyArgs} args - Arguments to filter Products_allergies to delete.
     * @example
     * // Delete a few Products_allergies
     * const { count } = await prisma.products_allergy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Products_allergyDeleteManyArgs>(
      args?: SelectSubset<T, Products_allergyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Products_allergyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products_allergies
     * const products_allergy = await prisma.products_allergy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Products_allergyUpdateManyArgs>(
      args: SelectSubset<T, Products_allergyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Products_allergy.
     * @param {Products_allergyUpsertArgs} args - Arguments to update or create a Products_allergy.
     * @example
     * // Update or create a Products_allergy
     * const products_allergy = await prisma.products_allergy.upsert({
     *   create: {
     *     // ... data to create a Products_allergy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products_allergy we want to update
     *   }
     * })
    **/
    upsert<T extends Products_allergyUpsertArgs>(
      args: SelectSubset<T, Products_allergyUpsertArgs>
    ): CheckSelect<T, Prisma__Products_allergyClient<Products_allergy>, Prisma__Products_allergyClient<Products_allergyGetPayload<T>>>

    /**
     * Count the number of Products_allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Products_allergyCountArgs} args - Arguments to filter Products_allergies to count.
     * @example
     * // Count the number of Products_allergies
     * const count = await prisma.products_allergy.count({
     *   where: {
     *     // ... the filter for the Products_allergies we want to count
     *   }
     * })
    **/
    count<T extends Products_allergyCountArgs>(
      args?: Subset<T, Products_allergyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Products_allergyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products_allergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Products_allergyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Products_allergyAggregateArgs>(args: Subset<T, Products_allergyAggregateArgs>): PrismaPromise<GetProducts_allergyAggregateType<T>>

    /**
     * Group by Products_allergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Products_allergyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Products_allergyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Products_allergyGroupByArgs['orderBy'] }
        : { orderBy?: Products_allergyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Products_allergyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProducts_allergyGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Products_allergy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Products_allergyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    allergies<T extends AllergyArgs = {}>(args?: Subset<T, AllergyArgs>): CheckSelect<T, Prisma__AllergyClient<Allergy | null >, Prisma__AllergyClient<AllergyGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Products_allergy findUnique
   */
  export type Products_allergyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Products_allergy
     * 
    **/
    select?: Products_allergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Products_allergyInclude | null
    /**
     * Throw an Error if a Products_allergy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Products_allergy to fetch.
     * 
    **/
    where: Products_allergyWhereUniqueInput
  }


  /**
   * Products_allergy findFirst
   */
  export type Products_allergyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Products_allergy
     * 
    **/
    select?: Products_allergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Products_allergyInclude | null
    /**
     * Throw an Error if a Products_allergy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Products_allergy to fetch.
     * 
    **/
    where?: Products_allergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products_allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<Products_allergyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products_allergies.
     * 
    **/
    cursor?: Products_allergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products_allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products_allergies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products_allergies.
     * 
    **/
    distinct?: Enumerable<Products_allergyScalarFieldEnum>
  }


  /**
   * Products_allergy findMany
   */
  export type Products_allergyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Products_allergy
     * 
    **/
    select?: Products_allergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Products_allergyInclude | null
    /**
     * Filter, which Products_allergies to fetch.
     * 
    **/
    where?: Products_allergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products_allergies to fetch.
     * 
    **/
    orderBy?: Enumerable<Products_allergyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products_allergies.
     * 
    **/
    cursor?: Products_allergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products_allergies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products_allergies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Products_allergyScalarFieldEnum>
  }


  /**
   * Products_allergy create
   */
  export type Products_allergyCreateArgs = {
    /**
     * Select specific fields to fetch from the Products_allergy
     * 
    **/
    select?: Products_allergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Products_allergyInclude | null
    /**
     * The data needed to create a Products_allergy.
     * 
    **/
    data: XOR<Products_allergyCreateInput, Products_allergyUncheckedCreateInput>
  }


  /**
   * Products_allergy createMany
   */
  export type Products_allergyCreateManyArgs = {
    /**
     * The data used to create many Products_allergies.
     * 
    **/
    data: Enumerable<Products_allergyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Products_allergy update
   */
  export type Products_allergyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Products_allergy
     * 
    **/
    select?: Products_allergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Products_allergyInclude | null
    /**
     * The data needed to update a Products_allergy.
     * 
    **/
    data: XOR<Products_allergyUpdateInput, Products_allergyUncheckedUpdateInput>
    /**
     * Choose, which Products_allergy to update.
     * 
    **/
    where: Products_allergyWhereUniqueInput
  }


  /**
   * Products_allergy updateMany
   */
  export type Products_allergyUpdateManyArgs = {
    /**
     * The data used to update Products_allergies.
     * 
    **/
    data: XOR<Products_allergyUpdateManyMutationInput, Products_allergyUncheckedUpdateManyInput>
    /**
     * Filter which Products_allergies to update
     * 
    **/
    where?: Products_allergyWhereInput
  }


  /**
   * Products_allergy upsert
   */
  export type Products_allergyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Products_allergy
     * 
    **/
    select?: Products_allergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Products_allergyInclude | null
    /**
     * The filter to search for the Products_allergy to update in case it exists.
     * 
    **/
    where: Products_allergyWhereUniqueInput
    /**
     * In case the Products_allergy found by the `where` argument doesn't exist, create a new Products_allergy with this data.
     * 
    **/
    create: XOR<Products_allergyCreateInput, Products_allergyUncheckedCreateInput>
    /**
     * In case the Products_allergy was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<Products_allergyUpdateInput, Products_allergyUncheckedUpdateInput>
  }


  /**
   * Products_allergy delete
   */
  export type Products_allergyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Products_allergy
     * 
    **/
    select?: Products_allergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Products_allergyInclude | null
    /**
     * Filter which Products_allergy to delete.
     * 
    **/
    where: Products_allergyWhereUniqueInput
  }


  /**
   * Products_allergy deleteMany
   */
  export type Products_allergyDeleteManyArgs = {
    /**
     * Filter which Products_allergies to delete
     * 
    **/
    where?: Products_allergyWhereInput
  }


  /**
   * Products_allergy without action
   */
  export type Products_allergyArgs = {
    /**
     * Select specific fields to fetch from the Products_allergy
     * 
    **/
    select?: Products_allergySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: Products_allergyInclude | null
  }



  /**
   * Model Nutrition
   */


  export type AggregateNutrition = {
    _count: NutritionCountAggregateOutputType | null
    _avg: NutritionAvgAggregateOutputType | null
    _sum: NutritionSumAggregateOutputType | null
    _min: NutritionMinAggregateOutputType | null
    _max: NutritionMaxAggregateOutputType | null
  }

  export type NutritionAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
  }

  export type NutritionSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
  }

  export type NutritionMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
    created_at: Date | null
  }

  export type NutritionMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
    created_at: Date | null
  }

  export type NutritionCountAggregateOutputType = {
    id: number
    product_id: number
    caffein: number
    fat: number
    sugar: number
    sodium: number
    created_at: number
    _all: number
  }


  export type NutritionAvgAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
  }

  export type NutritionSumAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
  }

  export type NutritionMinAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
    created_at?: true
  }

  export type NutritionMaxAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
    created_at?: true
  }

  export type NutritionCountAggregateInputType = {
    id?: true
    product_id?: true
    caffein?: true
    fat?: true
    sugar?: true
    sodium?: true
    created_at?: true
    _all?: true
  }

  export type NutritionAggregateArgs = {
    /**
     * Filter which Nutrition to aggregate.
     * 
    **/
    where?: NutritionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<NutritionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NutritionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nutritions
    **/
    _count?: true | NutritionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NutritionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NutritionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NutritionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NutritionMaxAggregateInputType
  }

  export type GetNutritionAggregateType<T extends NutritionAggregateArgs> = {
        [P in keyof T & keyof AggregateNutrition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNutrition[P]>
      : GetScalarType<T[P], AggregateNutrition[P]>
  }




  export type NutritionGroupByArgs = {
    where?: NutritionWhereInput
    orderBy?: Enumerable<NutritionOrderByWithAggregationInput>
    by: Array<NutritionScalarFieldEnum>
    having?: NutritionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NutritionCountAggregateInputType | true
    _avg?: NutritionAvgAggregateInputType
    _sum?: NutritionSumAggregateInputType
    _min?: NutritionMinAggregateInputType
    _max?: NutritionMaxAggregateInputType
  }


  export type NutritionGroupByOutputType = {
    id: number
    product_id: number
    caffein: number | null
    fat: number | null
    sugar: number | null
    sodium: number | null
    created_at: Date
    _count: NutritionCountAggregateOutputType | null
    _avg: NutritionAvgAggregateOutputType | null
    _sum: NutritionSumAggregateOutputType | null
    _min: NutritionMinAggregateOutputType | null
    _max: NutritionMaxAggregateOutputType | null
  }

  type GetNutritionGroupByPayload<T extends NutritionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NutritionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NutritionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NutritionGroupByOutputType[P]>
            : GetScalarType<T[P], NutritionGroupByOutputType[P]>
        }
      >
    >


  export type NutritionSelect = {
    id?: boolean
    product_id?: boolean
    caffein?: boolean
    fat?: boolean
    sugar?: boolean
    sodium?: boolean
    created_at?: boolean
    products?: boolean | ProductArgs
  }

  export type NutritionInclude = {
    products?: boolean | ProductArgs
  }

  export type NutritionGetPayload<
    S extends boolean | null | undefined | NutritionArgs,
    U = keyof S
      > = S extends true
        ? Nutrition
    : S extends undefined
    ? never
    : S extends NutritionArgs | NutritionFindManyArgs
    ?'include' extends U
    ? Nutrition  & {
    [P in TrueKeys<S['include']>]:
        P extends 'products' ? ProductGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'products' ? ProductGetPayload<S['select'][P]> :  P extends keyof Nutrition ? Nutrition[P] : never
  } 
    : Nutrition
  : Nutrition


  type NutritionCountArgs = Merge<
    Omit<NutritionFindManyArgs, 'select' | 'include'> & {
      select?: NutritionCountAggregateInputType | true
    }
  >

  export interface NutritionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Nutrition that matches the filter.
     * @param {NutritionFindUniqueArgs} args - Arguments to find a Nutrition
     * @example
     * // Get one Nutrition
     * const nutrition = await prisma.nutrition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NutritionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NutritionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Nutrition'> extends True ? CheckSelect<T, Prisma__NutritionClient<Nutrition>, Prisma__NutritionClient<NutritionGetPayload<T>>> : CheckSelect<T, Prisma__NutritionClient<Nutrition | null >, Prisma__NutritionClient<NutritionGetPayload<T> | null >>

    /**
     * Find the first Nutrition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionFindFirstArgs} args - Arguments to find a Nutrition
     * @example
     * // Get one Nutrition
     * const nutrition = await prisma.nutrition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NutritionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NutritionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Nutrition'> extends True ? CheckSelect<T, Prisma__NutritionClient<Nutrition>, Prisma__NutritionClient<NutritionGetPayload<T>>> : CheckSelect<T, Prisma__NutritionClient<Nutrition | null >, Prisma__NutritionClient<NutritionGetPayload<T> | null >>

    /**
     * Find zero or more Nutritions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nutritions
     * const nutritions = await prisma.nutrition.findMany()
     * 
     * // Get first 10 Nutritions
     * const nutritions = await prisma.nutrition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nutritionWithIdOnly = await prisma.nutrition.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NutritionFindManyArgs>(
      args?: SelectSubset<T, NutritionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Nutrition>>, PrismaPromise<Array<NutritionGetPayload<T>>>>

    /**
     * Create a Nutrition.
     * @param {NutritionCreateArgs} args - Arguments to create a Nutrition.
     * @example
     * // Create one Nutrition
     * const Nutrition = await prisma.nutrition.create({
     *   data: {
     *     // ... data to create a Nutrition
     *   }
     * })
     * 
    **/
    create<T extends NutritionCreateArgs>(
      args: SelectSubset<T, NutritionCreateArgs>
    ): CheckSelect<T, Prisma__NutritionClient<Nutrition>, Prisma__NutritionClient<NutritionGetPayload<T>>>

    /**
     * Create many Nutritions.
     *     @param {NutritionCreateManyArgs} args - Arguments to create many Nutritions.
     *     @example
     *     // Create many Nutritions
     *     const nutrition = await prisma.nutrition.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NutritionCreateManyArgs>(
      args?: SelectSubset<T, NutritionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Nutrition.
     * @param {NutritionDeleteArgs} args - Arguments to delete one Nutrition.
     * @example
     * // Delete one Nutrition
     * const Nutrition = await prisma.nutrition.delete({
     *   where: {
     *     // ... filter to delete one Nutrition
     *   }
     * })
     * 
    **/
    delete<T extends NutritionDeleteArgs>(
      args: SelectSubset<T, NutritionDeleteArgs>
    ): CheckSelect<T, Prisma__NutritionClient<Nutrition>, Prisma__NutritionClient<NutritionGetPayload<T>>>

    /**
     * Update one Nutrition.
     * @param {NutritionUpdateArgs} args - Arguments to update one Nutrition.
     * @example
     * // Update one Nutrition
     * const nutrition = await prisma.nutrition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NutritionUpdateArgs>(
      args: SelectSubset<T, NutritionUpdateArgs>
    ): CheckSelect<T, Prisma__NutritionClient<Nutrition>, Prisma__NutritionClient<NutritionGetPayload<T>>>

    /**
     * Delete zero or more Nutritions.
     * @param {NutritionDeleteManyArgs} args - Arguments to filter Nutritions to delete.
     * @example
     * // Delete a few Nutritions
     * const { count } = await prisma.nutrition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NutritionDeleteManyArgs>(
      args?: SelectSubset<T, NutritionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nutritions
     * const nutrition = await prisma.nutrition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NutritionUpdateManyArgs>(
      args: SelectSubset<T, NutritionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Nutrition.
     * @param {NutritionUpsertArgs} args - Arguments to update or create a Nutrition.
     * @example
     * // Update or create a Nutrition
     * const nutrition = await prisma.nutrition.upsert({
     *   create: {
     *     // ... data to create a Nutrition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nutrition we want to update
     *   }
     * })
    **/
    upsert<T extends NutritionUpsertArgs>(
      args: SelectSubset<T, NutritionUpsertArgs>
    ): CheckSelect<T, Prisma__NutritionClient<Nutrition>, Prisma__NutritionClient<NutritionGetPayload<T>>>

    /**
     * Count the number of Nutritions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionCountArgs} args - Arguments to filter Nutritions to count.
     * @example
     * // Count the number of Nutritions
     * const count = await prisma.nutrition.count({
     *   where: {
     *     // ... the filter for the Nutritions we want to count
     *   }
     * })
    **/
    count<T extends NutritionCountArgs>(
      args?: Subset<T, NutritionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NutritionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nutrition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NutritionAggregateArgs>(args: Subset<T, NutritionAggregateArgs>): PrismaPromise<GetNutritionAggregateType<T>>

    /**
     * Group by Nutrition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NutritionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NutritionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NutritionGroupByArgs['orderBy'] }
        : { orderBy?: NutritionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NutritionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNutritionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nutrition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NutritionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    products<T extends ProductArgs = {}>(args?: Subset<T, ProductArgs>): CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Nutrition findUnique
   */
  export type NutritionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Nutrition
     * 
    **/
    select?: NutritionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionInclude | null
    /**
     * Throw an Error if a Nutrition can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Nutrition to fetch.
     * 
    **/
    where: NutritionWhereUniqueInput
  }


  /**
   * Nutrition findFirst
   */
  export type NutritionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Nutrition
     * 
    **/
    select?: NutritionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionInclude | null
    /**
     * Throw an Error if a Nutrition can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Nutrition to fetch.
     * 
    **/
    where?: NutritionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<NutritionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nutritions.
     * 
    **/
    cursor?: NutritionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nutritions.
     * 
    **/
    distinct?: Enumerable<NutritionScalarFieldEnum>
  }


  /**
   * Nutrition findMany
   */
  export type NutritionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Nutrition
     * 
    **/
    select?: NutritionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionInclude | null
    /**
     * Filter, which Nutritions to fetch.
     * 
    **/
    where?: NutritionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nutritions to fetch.
     * 
    **/
    orderBy?: Enumerable<NutritionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nutritions.
     * 
    **/
    cursor?: NutritionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nutritions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nutritions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NutritionScalarFieldEnum>
  }


  /**
   * Nutrition create
   */
  export type NutritionCreateArgs = {
    /**
     * Select specific fields to fetch from the Nutrition
     * 
    **/
    select?: NutritionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionInclude | null
    /**
     * The data needed to create a Nutrition.
     * 
    **/
    data: XOR<NutritionCreateInput, NutritionUncheckedCreateInput>
  }


  /**
   * Nutrition createMany
   */
  export type NutritionCreateManyArgs = {
    /**
     * The data used to create many Nutritions.
     * 
    **/
    data: Enumerable<NutritionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Nutrition update
   */
  export type NutritionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Nutrition
     * 
    **/
    select?: NutritionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionInclude | null
    /**
     * The data needed to update a Nutrition.
     * 
    **/
    data: XOR<NutritionUpdateInput, NutritionUncheckedUpdateInput>
    /**
     * Choose, which Nutrition to update.
     * 
    **/
    where: NutritionWhereUniqueInput
  }


  /**
   * Nutrition updateMany
   */
  export type NutritionUpdateManyArgs = {
    /**
     * The data used to update Nutritions.
     * 
    **/
    data: XOR<NutritionUpdateManyMutationInput, NutritionUncheckedUpdateManyInput>
    /**
     * Filter which Nutritions to update
     * 
    **/
    where?: NutritionWhereInput
  }


  /**
   * Nutrition upsert
   */
  export type NutritionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Nutrition
     * 
    **/
    select?: NutritionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionInclude | null
    /**
     * The filter to search for the Nutrition to update in case it exists.
     * 
    **/
    where: NutritionWhereUniqueInput
    /**
     * In case the Nutrition found by the `where` argument doesn't exist, create a new Nutrition with this data.
     * 
    **/
    create: XOR<NutritionCreateInput, NutritionUncheckedCreateInput>
    /**
     * In case the Nutrition was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NutritionUpdateInput, NutritionUncheckedUpdateInput>
  }


  /**
   * Nutrition delete
   */
  export type NutritionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Nutrition
     * 
    **/
    select?: NutritionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionInclude | null
    /**
     * Filter which Nutrition to delete.
     * 
    **/
    where: NutritionWhereUniqueInput
  }


  /**
   * Nutrition deleteMany
   */
  export type NutritionDeleteManyArgs = {
    /**
     * Filter which Nutritions to delete
     * 
    **/
    where?: NutritionWhereInput
  }


  /**
   * Nutrition without action
   */
  export type NutritionArgs = {
    /**
     * Select specific fields to fetch from the Nutrition
     * 
    **/
    select?: NutritionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NutritionInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    username: string | null
    address: string | null
    phone_number: string | null
    policy_agreed: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    username: string | null
    address: string | null
    phone_number: string | null
    policy_agreed: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    username: number
    address: number
    phone_number: number
    policy_agreed: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    address?: true
    phone_number?: true
    policy_agreed?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    address?: true
    phone_number?: true
    policy_agreed?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    address?: true
    phone_number?: true
    policy_agreed?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    username: string | null
    address: string | null
    phone_number: string | null
    policy_agreed: boolean
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    address?: boolean
    phone_number?: boolean
    policy_agreed?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    korean_name: 'korean_name',
    english_name: 'english_name',
    category_id: 'category_id',
    created_at: 'created_at'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const Product_imageScalarFieldEnum: {
    id: 'id',
    image_url: 'image_url',
    product_id: 'product_id',
    created_at: 'created_at'
  };

  export type Product_imageScalarFieldEnum = (typeof Product_imageScalarFieldEnum)[keyof typeof Product_imageScalarFieldEnum]


  export const AllergyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at'
  };

  export type AllergyScalarFieldEnum = (typeof AllergyScalarFieldEnum)[keyof typeof AllergyScalarFieldEnum]


  export const Products_allergyScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    allergy_id: 'allergy_id',
    created_at: 'created_at'
  };

  export type Products_allergyScalarFieldEnum = (typeof Products_allergyScalarFieldEnum)[keyof typeof Products_allergyScalarFieldEnum]


  export const NutritionScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    caffein: 'caffein',
    fat: 'fat',
    sugar: 'sugar',
    sodium: 'sodium',
    created_at: 'created_at'
  };

  export type NutritionScalarFieldEnum = (typeof NutritionScalarFieldEnum)[keyof typeof NutritionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    username: 'username',
    address: 'address',
    phone_number: 'phone_number',
    policy_agreed: 'policy_agreed',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    Product?: ProductListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    Product?: ProductOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: number
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: IntFilter | number
    korean_name?: StringFilter | string
    english_name?: StringNullableFilter | string | null
    category_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    categories?: XOR<CategoryRelationFilter, CategoryWhereInput>
    Product_image?: Product_imageListRelationFilter
    Products_allergy?: Products_allergyListRelationFilter
    Nutrition?: XOR<NutritionRelationFilter, NutritionWhereInput> | null
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
    categories?: CategoryOrderByWithRelationInput
    Product_image?: Product_imageOrderByRelationAggregateInput
    Products_allergy?: Products_allergyOrderByRelationAggregateInput
    Nutrition?: NutritionOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = {
    id?: number
    korean_name?: string
  }

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    korean_name?: StringWithAggregatesFilter | string
    english_name?: StringNullableWithAggregatesFilter | string | null
    category_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Product_imageWhereInput = {
    AND?: Enumerable<Product_imageWhereInput>
    OR?: Enumerable<Product_imageWhereInput>
    NOT?: Enumerable<Product_imageWhereInput>
    id?: IntFilter | number
    image_url?: StringFilter | string
    product_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    products?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type Product_imageOrderByWithRelationInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
    products?: ProductOrderByWithRelationInput
  }

  export type Product_imageWhereUniqueInput = {
    id?: number
  }

  export type Product_imageOrderByWithAggregationInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
    _count?: Product_imageCountOrderByAggregateInput
    _avg?: Product_imageAvgOrderByAggregateInput
    _max?: Product_imageMaxOrderByAggregateInput
    _min?: Product_imageMinOrderByAggregateInput
    _sum?: Product_imageSumOrderByAggregateInput
  }

  export type Product_imageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Product_imageScalarWhereWithAggregatesInput>
    OR?: Enumerable<Product_imageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Product_imageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image_url?: StringWithAggregatesFilter | string
    product_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AllergyWhereInput = {
    AND?: Enumerable<AllergyWhereInput>
    OR?: Enumerable<AllergyWhereInput>
    NOT?: Enumerable<AllergyWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    Products_allergy?: Products_allergyListRelationFilter
  }

  export type AllergyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    Products_allergy?: Products_allergyOrderByRelationAggregateInput
  }

  export type AllergyWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type AllergyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    _count?: AllergyCountOrderByAggregateInput
    _avg?: AllergyAvgOrderByAggregateInput
    _max?: AllergyMaxOrderByAggregateInput
    _min?: AllergyMinOrderByAggregateInput
    _sum?: AllergySumOrderByAggregateInput
  }

  export type AllergyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AllergyScalarWhereWithAggregatesInput>
    OR?: Enumerable<AllergyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AllergyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type Products_allergyWhereInput = {
    AND?: Enumerable<Products_allergyWhereInput>
    OR?: Enumerable<Products_allergyWhereInput>
    NOT?: Enumerable<Products_allergyWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    allergy_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    products?: XOR<ProductRelationFilter, ProductWhereInput>
    allergies?: XOR<AllergyRelationFilter, AllergyWhereInput>
  }

  export type Products_allergyOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
    products?: ProductOrderByWithRelationInput
    allergies?: AllergyOrderByWithRelationInput
  }

  export type Products_allergyWhereUniqueInput = {
    id?: number
  }

  export type Products_allergyOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
    _count?: Products_allergyCountOrderByAggregateInput
    _avg?: Products_allergyAvgOrderByAggregateInput
    _max?: Products_allergyMaxOrderByAggregateInput
    _min?: Products_allergyMinOrderByAggregateInput
    _sum?: Products_allergySumOrderByAggregateInput
  }

  export type Products_allergyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Products_allergyScalarWhereWithAggregatesInput>
    OR?: Enumerable<Products_allergyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Products_allergyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    allergy_id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type NutritionWhereInput = {
    AND?: Enumerable<NutritionWhereInput>
    OR?: Enumerable<NutritionWhereInput>
    NOT?: Enumerable<NutritionWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    caffein?: FloatNullableFilter | number | null
    fat?: FloatNullableFilter | number | null
    sugar?: FloatNullableFilter | number | null
    sodium?: FloatNullableFilter | number | null
    created_at?: DateTimeFilter | Date | string
    products?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type NutritionOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    created_at?: SortOrder
    products?: ProductOrderByWithRelationInput
  }

  export type NutritionWhereUniqueInput = {
    id?: number
    product_id?: number
  }

  export type NutritionOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    created_at?: SortOrder
    _count?: NutritionCountOrderByAggregateInput
    _avg?: NutritionAvgOrderByAggregateInput
    _max?: NutritionMaxOrderByAggregateInput
    _min?: NutritionMinOrderByAggregateInput
    _sum?: NutritionSumOrderByAggregateInput
  }

  export type NutritionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NutritionScalarWhereWithAggregatesInput>
    OR?: Enumerable<NutritionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NutritionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    product_id?: IntWithAggregatesFilter | number
    caffein?: FloatNullableWithAggregatesFilter | number | null
    fat?: FloatNullableWithAggregatesFilter | number | null
    sugar?: FloatNullableWithAggregatesFilter | number | null
    sodium?: FloatNullableWithAggregatesFilter | number | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    username?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    phone_number?: StringNullableFilter | string | null
    policy_agreed?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    username?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    phone_number?: StringNullableWithAggregatesFilter | string | null
    policy_agreed?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CategoryCreateInput = {
    name: string
    created_at?: Date | string
    Product?: ProductCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    Product?: ProductUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUpdateManyWithoutCategoriesInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Product?: ProductUncheckedUpdateManyWithoutCategoriesInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string
    categories: CategoryCreateNestedOneWithoutProductInput
    Product_image?: Product_imageCreateNestedManyWithoutProductsInput
    Products_allergy?: Products_allergyCreateNestedManyWithoutProductsInput
    Nutrition?: NutritionCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string
    Product_image?: Product_imageUncheckedCreateNestedManyWithoutProductsInput
    Products_allergy?: Products_allergyUncheckedCreateNestedManyWithoutProductsInput
    Nutrition?: NutritionUncheckedCreateNestedOneWithoutProductsInput
  }

  export type ProductUpdateInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUpdateOneRequiredWithoutProductInput
    Product_image?: Product_imageUpdateManyWithoutProductsInput
    Products_allergy?: Products_allergyUpdateManyWithoutProductsInput
    Nutrition?: NutritionUpdateOneWithoutProductsInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Product_image?: Product_imageUncheckedUpdateManyWithoutProductsInput
    Products_allergy?: Products_allergyUncheckedUpdateManyWithoutProductsInput
    Nutrition?: NutritionUncheckedUpdateOneWithoutProductsInput
  }

  export type ProductCreateManyInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Product_imageCreateInput = {
    image_url: string
    created_at?: Date | string
    products: ProductCreateNestedOneWithoutProduct_imageInput
  }

  export type Product_imageUncheckedCreateInput = {
    id?: number
    image_url: string
    product_id: number
    created_at?: Date | string
  }

  export type Product_imageUpdateInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateOneRequiredWithoutProduct_imageInput
  }

  export type Product_imageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Product_imageCreateManyInput = {
    id?: number
    image_url: string
    product_id: number
    created_at?: Date | string
  }

  export type Product_imageUpdateManyMutationInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Product_imageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllergyCreateInput = {
    name: string
    created_at?: Date | string
    Products_allergy?: Products_allergyCreateNestedManyWithoutAllergiesInput
  }

  export type AllergyUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    Products_allergy?: Products_allergyUncheckedCreateNestedManyWithoutAllergiesInput
  }

  export type AllergyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Products_allergy?: Products_allergyUpdateManyWithoutAllergiesInput
  }

  export type AllergyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Products_allergy?: Products_allergyUncheckedUpdateManyWithoutAllergiesInput
  }

  export type AllergyCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
  }

  export type AllergyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllergyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Products_allergyCreateInput = {
    created_at?: Date | string
    products: ProductCreateNestedOneWithoutProducts_allergyInput
    allergies: AllergyCreateNestedOneWithoutProducts_allergyInput
  }

  export type Products_allergyUncheckedCreateInput = {
    id?: number
    product_id: number
    allergy_id: number
    created_at?: Date | string
  }

  export type Products_allergyUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateOneRequiredWithoutProducts_allergyInput
    allergies?: AllergyUpdateOneRequiredWithoutProducts_allergyInput
  }

  export type Products_allergyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Products_allergyCreateManyInput = {
    id?: number
    product_id: number
    allergy_id: number
    created_at?: Date | string
  }

  export type Products_allergyUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Products_allergyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NutritionCreateInput = {
    caffein?: number | null
    fat?: number | null
    sugar?: number | null
    sodium?: number | null
    created_at?: Date | string
    products: ProductCreateNestedOneWithoutNutritionInput
  }

  export type NutritionUncheckedCreateInput = {
    id?: number
    product_id: number
    caffein?: number | null
    fat?: number | null
    sugar?: number | null
    sodium?: number | null
    created_at?: Date | string
  }

  export type NutritionUpdateInput = {
    caffein?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    sugar?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateOneRequiredWithoutNutritionInput
  }

  export type NutritionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    caffein?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    sugar?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NutritionCreateManyInput = {
    id?: number
    product_id: number
    caffein?: number | null
    fat?: number | null
    sugar?: number | null
    sodium?: number | null
    created_at?: Date | string
  }

  export type NutritionUpdateManyMutationInput = {
    caffein?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    sugar?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NutritionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    caffein?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    sugar?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    username?: string | null
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    username?: string | null
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    username?: string | null
    address?: string | null
    phone_number?: string | null
    policy_agreed?: boolean
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    policy_agreed?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type Product_imageListRelationFilter = {
    every?: Product_imageWhereInput
    some?: Product_imageWhereInput
    none?: Product_imageWhereInput
  }

  export type Products_allergyListRelationFilter = {
    every?: Products_allergyWhereInput
    some?: Products_allergyWhereInput
    none?: Products_allergyWhereInput
  }

  export type NutritionRelationFilter = {
    is?: NutritionWhereInput | null
    isNot?: NutritionWhereInput | null
  }

  export type Product_imageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Products_allergyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    korean_name?: SortOrder
    english_name?: SortOrder
    category_id?: SortOrder
    created_at?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type Product_imageCountOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type Product_imageAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type Product_imageMaxOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type Product_imageMinOrderByAggregateInput = {
    id?: SortOrder
    image_url?: SortOrder
    product_id?: SortOrder
    created_at?: SortOrder
  }

  export type Product_imageSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
  }

  export type AllergyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type AllergyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AllergyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type AllergyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
  }

  export type AllergySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AllergyRelationFilter = {
    is?: AllergyWhereInput
    isNot?: AllergyWhereInput
  }

  export type Products_allergyCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type Products_allergyAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
  }

  export type Products_allergyMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type Products_allergyMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
    created_at?: SortOrder
  }

  export type Products_allergySumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    allergy_id?: SortOrder
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NutritionCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    created_at?: SortOrder
  }

  export type NutritionAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
  }

  export type NutritionMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    created_at?: SortOrder
  }

  export type NutritionMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
    created_at?: SortOrder
  }

  export type NutritionSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    caffein?: SortOrder
    fat?: SortOrder
    sugar?: SortOrder
    sodium?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    address?: SortOrder
    phone_number?: SortOrder
    policy_agreed?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ProductCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<ProductCreateWithoutCategoriesInput>, Enumerable<ProductUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoriesInput>
    createMany?: ProductCreateManyCategoriesInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<ProductCreateWithoutCategoriesInput>, Enumerable<ProductUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoriesInput>
    createMany?: ProductCreateManyCategoriesInputEnvelope
    connect?: Enumerable<ProductWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProductUpdateManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<ProductCreateWithoutCategoriesInput>, Enumerable<ProductUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: ProductCreateManyCategoriesInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUncheckedUpdateManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<ProductCreateWithoutCategoriesInput>, Enumerable<ProductUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<ProductCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<ProductUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: ProductCreateManyCategoriesInputEnvelope
    set?: Enumerable<ProductWhereUniqueInput>
    disconnect?: Enumerable<ProductWhereUniqueInput>
    delete?: Enumerable<ProductWhereUniqueInput>
    connect?: Enumerable<ProductWhereUniqueInput>
    update?: Enumerable<ProductUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<ProductUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<ProductScalarWhereInput>
  }

  export type CategoryCreateNestedOneWithoutProductInput = {
    create?: XOR<CategoryCreateWithoutProductInput, CategoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductInput
    connect?: CategoryWhereUniqueInput
  }

  export type Product_imageCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<Product_imageCreateWithoutProductsInput>, Enumerable<Product_imageUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Product_imageCreateOrConnectWithoutProductsInput>
    createMany?: Product_imageCreateManyProductsInputEnvelope
    connect?: Enumerable<Product_imageWhereUniqueInput>
  }

  export type Products_allergyCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<Products_allergyCreateWithoutProductsInput>, Enumerable<Products_allergyUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Products_allergyCreateOrConnectWithoutProductsInput>
    createMany?: Products_allergyCreateManyProductsInputEnvelope
    connect?: Enumerable<Products_allergyWhereUniqueInput>
  }

  export type NutritionCreateNestedOneWithoutProductsInput = {
    create?: XOR<NutritionCreateWithoutProductsInput, NutritionUncheckedCreateWithoutProductsInput>
    connectOrCreate?: NutritionCreateOrConnectWithoutProductsInput
    connect?: NutritionWhereUniqueInput
  }

  export type Product_imageUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<Product_imageCreateWithoutProductsInput>, Enumerable<Product_imageUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Product_imageCreateOrConnectWithoutProductsInput>
    createMany?: Product_imageCreateManyProductsInputEnvelope
    connect?: Enumerable<Product_imageWhereUniqueInput>
  }

  export type Products_allergyUncheckedCreateNestedManyWithoutProductsInput = {
    create?: XOR<Enumerable<Products_allergyCreateWithoutProductsInput>, Enumerable<Products_allergyUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Products_allergyCreateOrConnectWithoutProductsInput>
    createMany?: Products_allergyCreateManyProductsInputEnvelope
    connect?: Enumerable<Products_allergyWhereUniqueInput>
  }

  export type NutritionUncheckedCreateNestedOneWithoutProductsInput = {
    create?: XOR<NutritionCreateWithoutProductsInput, NutritionUncheckedCreateWithoutProductsInput>
    connectOrCreate?: NutritionCreateOrConnectWithoutProductsInput
    connect?: NutritionWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CategoryUpdateOneRequiredWithoutProductInput = {
    create?: XOR<CategoryCreateWithoutProductInput, CategoryUncheckedCreateWithoutProductInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductInput
    upsert?: CategoryUpsertWithoutProductInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutProductInput, CategoryUncheckedUpdateWithoutProductInput>
  }

  export type Product_imageUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<Product_imageCreateWithoutProductsInput>, Enumerable<Product_imageUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Product_imageCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<Product_imageUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: Product_imageCreateManyProductsInputEnvelope
    set?: Enumerable<Product_imageWhereUniqueInput>
    disconnect?: Enumerable<Product_imageWhereUniqueInput>
    delete?: Enumerable<Product_imageWhereUniqueInput>
    connect?: Enumerable<Product_imageWhereUniqueInput>
    update?: Enumerable<Product_imageUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<Product_imageUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<Product_imageScalarWhereInput>
  }

  export type Products_allergyUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<Products_allergyCreateWithoutProductsInput>, Enumerable<Products_allergyUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Products_allergyCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<Products_allergyUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: Products_allergyCreateManyProductsInputEnvelope
    set?: Enumerable<Products_allergyWhereUniqueInput>
    disconnect?: Enumerable<Products_allergyWhereUniqueInput>
    delete?: Enumerable<Products_allergyWhereUniqueInput>
    connect?: Enumerable<Products_allergyWhereUniqueInput>
    update?: Enumerable<Products_allergyUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<Products_allergyUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<Products_allergyScalarWhereInput>
  }

  export type NutritionUpdateOneWithoutProductsInput = {
    create?: XOR<NutritionCreateWithoutProductsInput, NutritionUncheckedCreateWithoutProductsInput>
    connectOrCreate?: NutritionCreateOrConnectWithoutProductsInput
    upsert?: NutritionUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: boolean
    connect?: NutritionWhereUniqueInput
    update?: XOR<NutritionUpdateWithoutProductsInput, NutritionUncheckedUpdateWithoutProductsInput>
  }

  export type Product_imageUncheckedUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<Product_imageCreateWithoutProductsInput>, Enumerable<Product_imageUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Product_imageCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<Product_imageUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: Product_imageCreateManyProductsInputEnvelope
    set?: Enumerable<Product_imageWhereUniqueInput>
    disconnect?: Enumerable<Product_imageWhereUniqueInput>
    delete?: Enumerable<Product_imageWhereUniqueInput>
    connect?: Enumerable<Product_imageWhereUniqueInput>
    update?: Enumerable<Product_imageUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<Product_imageUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<Product_imageScalarWhereInput>
  }

  export type Products_allergyUncheckedUpdateManyWithoutProductsInput = {
    create?: XOR<Enumerable<Products_allergyCreateWithoutProductsInput>, Enumerable<Products_allergyUncheckedCreateWithoutProductsInput>>
    connectOrCreate?: Enumerable<Products_allergyCreateOrConnectWithoutProductsInput>
    upsert?: Enumerable<Products_allergyUpsertWithWhereUniqueWithoutProductsInput>
    createMany?: Products_allergyCreateManyProductsInputEnvelope
    set?: Enumerable<Products_allergyWhereUniqueInput>
    disconnect?: Enumerable<Products_allergyWhereUniqueInput>
    delete?: Enumerable<Products_allergyWhereUniqueInput>
    connect?: Enumerable<Products_allergyWhereUniqueInput>
    update?: Enumerable<Products_allergyUpdateWithWhereUniqueWithoutProductsInput>
    updateMany?: Enumerable<Products_allergyUpdateManyWithWhereWithoutProductsInput>
    deleteMany?: Enumerable<Products_allergyScalarWhereInput>
  }

  export type NutritionUncheckedUpdateOneWithoutProductsInput = {
    create?: XOR<NutritionCreateWithoutProductsInput, NutritionUncheckedCreateWithoutProductsInput>
    connectOrCreate?: NutritionCreateOrConnectWithoutProductsInput
    upsert?: NutritionUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: boolean
    connect?: NutritionWhereUniqueInput
    update?: XOR<NutritionUpdateWithoutProductsInput, NutritionUncheckedUpdateWithoutProductsInput>
  }

  export type ProductCreateNestedOneWithoutProduct_imageInput = {
    create?: XOR<ProductCreateWithoutProduct_imageInput, ProductUncheckedCreateWithoutProduct_imageInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_imageInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutProduct_imageInput = {
    create?: XOR<ProductCreateWithoutProduct_imageInput, ProductUncheckedCreateWithoutProduct_imageInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProduct_imageInput
    upsert?: ProductUpsertWithoutProduct_imageInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutProduct_imageInput, ProductUncheckedUpdateWithoutProduct_imageInput>
  }

  export type Products_allergyCreateNestedManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<Products_allergyCreateWithoutAllergiesInput>, Enumerable<Products_allergyUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<Products_allergyCreateOrConnectWithoutAllergiesInput>
    createMany?: Products_allergyCreateManyAllergiesInputEnvelope
    connect?: Enumerable<Products_allergyWhereUniqueInput>
  }

  export type Products_allergyUncheckedCreateNestedManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<Products_allergyCreateWithoutAllergiesInput>, Enumerable<Products_allergyUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<Products_allergyCreateOrConnectWithoutAllergiesInput>
    createMany?: Products_allergyCreateManyAllergiesInputEnvelope
    connect?: Enumerable<Products_allergyWhereUniqueInput>
  }

  export type Products_allergyUpdateManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<Products_allergyCreateWithoutAllergiesInput>, Enumerable<Products_allergyUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<Products_allergyCreateOrConnectWithoutAllergiesInput>
    upsert?: Enumerable<Products_allergyUpsertWithWhereUniqueWithoutAllergiesInput>
    createMany?: Products_allergyCreateManyAllergiesInputEnvelope
    set?: Enumerable<Products_allergyWhereUniqueInput>
    disconnect?: Enumerable<Products_allergyWhereUniqueInput>
    delete?: Enumerable<Products_allergyWhereUniqueInput>
    connect?: Enumerable<Products_allergyWhereUniqueInput>
    update?: Enumerable<Products_allergyUpdateWithWhereUniqueWithoutAllergiesInput>
    updateMany?: Enumerable<Products_allergyUpdateManyWithWhereWithoutAllergiesInput>
    deleteMany?: Enumerable<Products_allergyScalarWhereInput>
  }

  export type Products_allergyUncheckedUpdateManyWithoutAllergiesInput = {
    create?: XOR<Enumerable<Products_allergyCreateWithoutAllergiesInput>, Enumerable<Products_allergyUncheckedCreateWithoutAllergiesInput>>
    connectOrCreate?: Enumerable<Products_allergyCreateOrConnectWithoutAllergiesInput>
    upsert?: Enumerable<Products_allergyUpsertWithWhereUniqueWithoutAllergiesInput>
    createMany?: Products_allergyCreateManyAllergiesInputEnvelope
    set?: Enumerable<Products_allergyWhereUniqueInput>
    disconnect?: Enumerable<Products_allergyWhereUniqueInput>
    delete?: Enumerable<Products_allergyWhereUniqueInput>
    connect?: Enumerable<Products_allergyWhereUniqueInput>
    update?: Enumerable<Products_allergyUpdateWithWhereUniqueWithoutAllergiesInput>
    updateMany?: Enumerable<Products_allergyUpdateManyWithWhereWithoutAllergiesInput>
    deleteMany?: Enumerable<Products_allergyScalarWhereInput>
  }

  export type ProductCreateNestedOneWithoutProducts_allergyInput = {
    create?: XOR<ProductCreateWithoutProducts_allergyInput, ProductUncheckedCreateWithoutProducts_allergyInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProducts_allergyInput
    connect?: ProductWhereUniqueInput
  }

  export type AllergyCreateNestedOneWithoutProducts_allergyInput = {
    create?: XOR<AllergyCreateWithoutProducts_allergyInput, AllergyUncheckedCreateWithoutProducts_allergyInput>
    connectOrCreate?: AllergyCreateOrConnectWithoutProducts_allergyInput
    connect?: AllergyWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutProducts_allergyInput = {
    create?: XOR<ProductCreateWithoutProducts_allergyInput, ProductUncheckedCreateWithoutProducts_allergyInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProducts_allergyInput
    upsert?: ProductUpsertWithoutProducts_allergyInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutProducts_allergyInput, ProductUncheckedUpdateWithoutProducts_allergyInput>
  }

  export type AllergyUpdateOneRequiredWithoutProducts_allergyInput = {
    create?: XOR<AllergyCreateWithoutProducts_allergyInput, AllergyUncheckedCreateWithoutProducts_allergyInput>
    connectOrCreate?: AllergyCreateOrConnectWithoutProducts_allergyInput
    upsert?: AllergyUpsertWithoutProducts_allergyInput
    connect?: AllergyWhereUniqueInput
    update?: XOR<AllergyUpdateWithoutProducts_allergyInput, AllergyUncheckedUpdateWithoutProducts_allergyInput>
  }

  export type ProductCreateNestedOneWithoutNutritionInput = {
    create?: XOR<ProductCreateWithoutNutritionInput, ProductUncheckedCreateWithoutNutritionInput>
    connectOrCreate?: ProductCreateOrConnectWithoutNutritionInput
    connect?: ProductWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUpdateOneRequiredWithoutNutritionInput = {
    create?: XOR<ProductCreateWithoutNutritionInput, ProductUncheckedCreateWithoutNutritionInput>
    connectOrCreate?: ProductCreateOrConnectWithoutNutritionInput
    upsert?: ProductUpsertWithoutNutritionInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutNutritionInput, ProductUncheckedUpdateWithoutNutritionInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type ProductCreateWithoutCategoriesInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string
    Product_image?: Product_imageCreateNestedManyWithoutProductsInput
    Products_allergy?: Products_allergyCreateNestedManyWithoutProductsInput
    Nutrition?: NutritionCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutCategoriesInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    created_at?: Date | string
    Product_image?: Product_imageUncheckedCreateNestedManyWithoutProductsInput
    Products_allergy?: Products_allergyUncheckedCreateNestedManyWithoutProductsInput
    Nutrition?: NutritionUncheckedCreateNestedOneWithoutProductsInput
  }

  export type ProductCreateOrConnectWithoutCategoriesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput>
  }

  export type ProductCreateManyCategoriesInputEnvelope = {
    data: Enumerable<ProductCreateManyCategoriesInput>
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoriesInput, ProductUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ProductCreateWithoutCategoriesInput, ProductUncheckedCreateWithoutCategoriesInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoriesInput, ProductUncheckedUpdateWithoutCategoriesInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoriesInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductScalarWhereInput = {
    AND?: Enumerable<ProductScalarWhereInput>
    OR?: Enumerable<ProductScalarWhereInput>
    NOT?: Enumerable<ProductScalarWhereInput>
    id?: IntFilter | number
    korean_name?: StringFilter | string
    english_name?: StringNullableFilter | string | null
    category_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
  }

  export type CategoryCreateWithoutProductInput = {
    name: string
    created_at?: Date | string
  }

  export type CategoryUncheckedCreateWithoutProductInput = {
    id?: number
    name: string
    created_at?: Date | string
  }

  export type CategoryCreateOrConnectWithoutProductInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductInput, CategoryUncheckedCreateWithoutProductInput>
  }

  export type Product_imageCreateWithoutProductsInput = {
    image_url: string
    created_at?: Date | string
  }

  export type Product_imageUncheckedCreateWithoutProductsInput = {
    id?: number
    image_url: string
    created_at?: Date | string
  }

  export type Product_imageCreateOrConnectWithoutProductsInput = {
    where: Product_imageWhereUniqueInput
    create: XOR<Product_imageCreateWithoutProductsInput, Product_imageUncheckedCreateWithoutProductsInput>
  }

  export type Product_imageCreateManyProductsInputEnvelope = {
    data: Enumerable<Product_imageCreateManyProductsInput>
    skipDuplicates?: boolean
  }

  export type Products_allergyCreateWithoutProductsInput = {
    created_at?: Date | string
    allergies: AllergyCreateNestedOneWithoutProducts_allergyInput
  }

  export type Products_allergyUncheckedCreateWithoutProductsInput = {
    id?: number
    allergy_id: number
    created_at?: Date | string
  }

  export type Products_allergyCreateOrConnectWithoutProductsInput = {
    where: Products_allergyWhereUniqueInput
    create: XOR<Products_allergyCreateWithoutProductsInput, Products_allergyUncheckedCreateWithoutProductsInput>
  }

  export type Products_allergyCreateManyProductsInputEnvelope = {
    data: Enumerable<Products_allergyCreateManyProductsInput>
    skipDuplicates?: boolean
  }

  export type NutritionCreateWithoutProductsInput = {
    caffein?: number | null
    fat?: number | null
    sugar?: number | null
    sodium?: number | null
    created_at?: Date | string
  }

  export type NutritionUncheckedCreateWithoutProductsInput = {
    id?: number
    caffein?: number | null
    fat?: number | null
    sugar?: number | null
    sodium?: number | null
    created_at?: Date | string
  }

  export type NutritionCreateOrConnectWithoutProductsInput = {
    where: NutritionWhereUniqueInput
    create: XOR<NutritionCreateWithoutProductsInput, NutritionUncheckedCreateWithoutProductsInput>
  }

  export type CategoryUpsertWithoutProductInput = {
    update: XOR<CategoryUpdateWithoutProductInput, CategoryUncheckedUpdateWithoutProductInput>
    create: XOR<CategoryCreateWithoutProductInput, CategoryUncheckedCreateWithoutProductInput>
  }

  export type CategoryUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Product_imageUpsertWithWhereUniqueWithoutProductsInput = {
    where: Product_imageWhereUniqueInput
    update: XOR<Product_imageUpdateWithoutProductsInput, Product_imageUncheckedUpdateWithoutProductsInput>
    create: XOR<Product_imageCreateWithoutProductsInput, Product_imageUncheckedCreateWithoutProductsInput>
  }

  export type Product_imageUpdateWithWhereUniqueWithoutProductsInput = {
    where: Product_imageWhereUniqueInput
    data: XOR<Product_imageUpdateWithoutProductsInput, Product_imageUncheckedUpdateWithoutProductsInput>
  }

  export type Product_imageUpdateManyWithWhereWithoutProductsInput = {
    where: Product_imageScalarWhereInput
    data: XOR<Product_imageUpdateManyMutationInput, Product_imageUncheckedUpdateManyWithoutProduct_imageInput>
  }

  export type Product_imageScalarWhereInput = {
    AND?: Enumerable<Product_imageScalarWhereInput>
    OR?: Enumerable<Product_imageScalarWhereInput>
    NOT?: Enumerable<Product_imageScalarWhereInput>
    id?: IntFilter | number
    image_url?: StringFilter | string
    product_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
  }

  export type Products_allergyUpsertWithWhereUniqueWithoutProductsInput = {
    where: Products_allergyWhereUniqueInput
    update: XOR<Products_allergyUpdateWithoutProductsInput, Products_allergyUncheckedUpdateWithoutProductsInput>
    create: XOR<Products_allergyCreateWithoutProductsInput, Products_allergyUncheckedCreateWithoutProductsInput>
  }

  export type Products_allergyUpdateWithWhereUniqueWithoutProductsInput = {
    where: Products_allergyWhereUniqueInput
    data: XOR<Products_allergyUpdateWithoutProductsInput, Products_allergyUncheckedUpdateWithoutProductsInput>
  }

  export type Products_allergyUpdateManyWithWhereWithoutProductsInput = {
    where: Products_allergyScalarWhereInput
    data: XOR<Products_allergyUpdateManyMutationInput, Products_allergyUncheckedUpdateManyWithoutProducts_allergyInput>
  }

  export type Products_allergyScalarWhereInput = {
    AND?: Enumerable<Products_allergyScalarWhereInput>
    OR?: Enumerable<Products_allergyScalarWhereInput>
    NOT?: Enumerable<Products_allergyScalarWhereInput>
    id?: IntFilter | number
    product_id?: IntFilter | number
    allergy_id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
  }

  export type NutritionUpsertWithoutProductsInput = {
    update: XOR<NutritionUpdateWithoutProductsInput, NutritionUncheckedUpdateWithoutProductsInput>
    create: XOR<NutritionCreateWithoutProductsInput, NutritionUncheckedCreateWithoutProductsInput>
  }

  export type NutritionUpdateWithoutProductsInput = {
    caffein?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    sugar?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NutritionUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    caffein?: NullableFloatFieldUpdateOperationsInput | number | null
    fat?: NullableFloatFieldUpdateOperationsInput | number | null
    sugar?: NullableFloatFieldUpdateOperationsInput | number | null
    sodium?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateWithoutProduct_imageInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string
    categories: CategoryCreateNestedOneWithoutProductInput
    Products_allergy?: Products_allergyCreateNestedManyWithoutProductsInput
    Nutrition?: NutritionCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutProduct_imageInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string
    Products_allergy?: Products_allergyUncheckedCreateNestedManyWithoutProductsInput
    Nutrition?: NutritionUncheckedCreateNestedOneWithoutProductsInput
  }

  export type ProductCreateOrConnectWithoutProduct_imageInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProduct_imageInput, ProductUncheckedCreateWithoutProduct_imageInput>
  }

  export type ProductUpsertWithoutProduct_imageInput = {
    update: XOR<ProductUpdateWithoutProduct_imageInput, ProductUncheckedUpdateWithoutProduct_imageInput>
    create: XOR<ProductCreateWithoutProduct_imageInput, ProductUncheckedCreateWithoutProduct_imageInput>
  }

  export type ProductUpdateWithoutProduct_imageInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUpdateOneRequiredWithoutProductInput
    Products_allergy?: Products_allergyUpdateManyWithoutProductsInput
    Nutrition?: NutritionUpdateOneWithoutProductsInput
  }

  export type ProductUncheckedUpdateWithoutProduct_imageInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Products_allergy?: Products_allergyUncheckedUpdateManyWithoutProductsInput
    Nutrition?: NutritionUncheckedUpdateOneWithoutProductsInput
  }

  export type Products_allergyCreateWithoutAllergiesInput = {
    created_at?: Date | string
    products: ProductCreateNestedOneWithoutProducts_allergyInput
  }

  export type Products_allergyUncheckedCreateWithoutAllergiesInput = {
    id?: number
    product_id: number
    created_at?: Date | string
  }

  export type Products_allergyCreateOrConnectWithoutAllergiesInput = {
    where: Products_allergyWhereUniqueInput
    create: XOR<Products_allergyCreateWithoutAllergiesInput, Products_allergyUncheckedCreateWithoutAllergiesInput>
  }

  export type Products_allergyCreateManyAllergiesInputEnvelope = {
    data: Enumerable<Products_allergyCreateManyAllergiesInput>
    skipDuplicates?: boolean
  }

  export type Products_allergyUpsertWithWhereUniqueWithoutAllergiesInput = {
    where: Products_allergyWhereUniqueInput
    update: XOR<Products_allergyUpdateWithoutAllergiesInput, Products_allergyUncheckedUpdateWithoutAllergiesInput>
    create: XOR<Products_allergyCreateWithoutAllergiesInput, Products_allergyUncheckedCreateWithoutAllergiesInput>
  }

  export type Products_allergyUpdateWithWhereUniqueWithoutAllergiesInput = {
    where: Products_allergyWhereUniqueInput
    data: XOR<Products_allergyUpdateWithoutAllergiesInput, Products_allergyUncheckedUpdateWithoutAllergiesInput>
  }

  export type Products_allergyUpdateManyWithWhereWithoutAllergiesInput = {
    where: Products_allergyScalarWhereInput
    data: XOR<Products_allergyUpdateManyMutationInput, Products_allergyUncheckedUpdateManyWithoutProducts_allergyInput>
  }

  export type ProductCreateWithoutProducts_allergyInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string
    categories: CategoryCreateNestedOneWithoutProductInput
    Product_image?: Product_imageCreateNestedManyWithoutProductsInput
    Nutrition?: NutritionCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutProducts_allergyInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string
    Product_image?: Product_imageUncheckedCreateNestedManyWithoutProductsInput
    Nutrition?: NutritionUncheckedCreateNestedOneWithoutProductsInput
  }

  export type ProductCreateOrConnectWithoutProducts_allergyInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProducts_allergyInput, ProductUncheckedCreateWithoutProducts_allergyInput>
  }

  export type AllergyCreateWithoutProducts_allergyInput = {
    name: string
    created_at?: Date | string
  }

  export type AllergyUncheckedCreateWithoutProducts_allergyInput = {
    id?: number
    name: string
    created_at?: Date | string
  }

  export type AllergyCreateOrConnectWithoutProducts_allergyInput = {
    where: AllergyWhereUniqueInput
    create: XOR<AllergyCreateWithoutProducts_allergyInput, AllergyUncheckedCreateWithoutProducts_allergyInput>
  }

  export type ProductUpsertWithoutProducts_allergyInput = {
    update: XOR<ProductUpdateWithoutProducts_allergyInput, ProductUncheckedUpdateWithoutProducts_allergyInput>
    create: XOR<ProductCreateWithoutProducts_allergyInput, ProductUncheckedCreateWithoutProducts_allergyInput>
  }

  export type ProductUpdateWithoutProducts_allergyInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUpdateOneRequiredWithoutProductInput
    Product_image?: Product_imageUpdateManyWithoutProductsInput
    Nutrition?: NutritionUpdateOneWithoutProductsInput
  }

  export type ProductUncheckedUpdateWithoutProducts_allergyInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Product_image?: Product_imageUncheckedUpdateManyWithoutProductsInput
    Nutrition?: NutritionUncheckedUpdateOneWithoutProductsInput
  }

  export type AllergyUpsertWithoutProducts_allergyInput = {
    update: XOR<AllergyUpdateWithoutProducts_allergyInput, AllergyUncheckedUpdateWithoutProducts_allergyInput>
    create: XOR<AllergyCreateWithoutProducts_allergyInput, AllergyUncheckedCreateWithoutProducts_allergyInput>
  }

  export type AllergyUpdateWithoutProducts_allergyInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllergyUncheckedUpdateWithoutProducts_allergyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateWithoutNutritionInput = {
    korean_name: string
    english_name?: string | null
    created_at?: Date | string
    categories: CategoryCreateNestedOneWithoutProductInput
    Product_image?: Product_imageCreateNestedManyWithoutProductsInput
    Products_allergy?: Products_allergyCreateNestedManyWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutNutritionInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    category_id: number
    created_at?: Date | string
    Product_image?: Product_imageUncheckedCreateNestedManyWithoutProductsInput
    Products_allergy?: Products_allergyUncheckedCreateNestedManyWithoutProductsInput
  }

  export type ProductCreateOrConnectWithoutNutritionInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutNutritionInput, ProductUncheckedCreateWithoutNutritionInput>
  }

  export type ProductUpsertWithoutNutritionInput = {
    update: XOR<ProductUpdateWithoutNutritionInput, ProductUncheckedUpdateWithoutNutritionInput>
    create: XOR<ProductCreateWithoutNutritionInput, ProductUncheckedCreateWithoutNutritionInput>
  }

  export type ProductUpdateWithoutNutritionInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategoryUpdateOneRequiredWithoutProductInput
    Product_image?: Product_imageUpdateManyWithoutProductsInput
    Products_allergy?: Products_allergyUpdateManyWithoutProductsInput
  }

  export type ProductUncheckedUpdateWithoutNutritionInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    category_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Product_image?: Product_imageUncheckedUpdateManyWithoutProductsInput
    Products_allergy?: Products_allergyUncheckedUpdateManyWithoutProductsInput
  }

  export type ProductCreateManyCategoriesInput = {
    id?: number
    korean_name: string
    english_name?: string | null
    created_at?: Date | string
  }

  export type ProductUpdateWithoutCategoriesInput = {
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Product_image?: Product_imageUpdateManyWithoutProductsInput
    Products_allergy?: Products_allergyUpdateManyWithoutProductsInput
    Nutrition?: NutritionUpdateOneWithoutProductsInput
  }

  export type ProductUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Product_image?: Product_imageUncheckedUpdateManyWithoutProductsInput
    Products_allergy?: Products_allergyUncheckedUpdateManyWithoutProductsInput
    Nutrition?: NutritionUncheckedUpdateOneWithoutProductsInput
  }

  export type ProductUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    korean_name?: StringFieldUpdateOperationsInput | string
    english_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Product_imageCreateManyProductsInput = {
    id?: number
    image_url: string
    created_at?: Date | string
  }

  export type Products_allergyCreateManyProductsInput = {
    id?: number
    allergy_id: number
    created_at?: Date | string
  }

  export type Product_imageUpdateWithoutProductsInput = {
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Product_imageUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Product_imageUncheckedUpdateManyWithoutProduct_imageInput = {
    id?: IntFieldUpdateOperationsInput | number
    image_url?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Products_allergyUpdateWithoutProductsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    allergies?: AllergyUpdateOneRequiredWithoutProducts_allergyInput
  }

  export type Products_allergyUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Products_allergyUncheckedUpdateManyWithoutProducts_allergyInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergy_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Products_allergyCreateManyAllergiesInput = {
    id?: number
    product_id: number
    created_at?: Date | string
  }

  export type Products_allergyUpdateWithoutAllergiesInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateOneRequiredWithoutProducts_allergyInput
  }

  export type Products_allergyUncheckedUpdateWithoutAllergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}